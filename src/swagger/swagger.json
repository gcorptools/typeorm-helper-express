{
  "components": {
    "schemas": {
      "Page": {
        "description": "page of data",
        "required": [
          "page",
          "size",
          "sortBy",
          "count",
          "totalPages",
          "totalElements",
          "data"
        ],
        "type": "object",
        "properties": {
          "page": {
            "description": "The page's number (0 based number)",
            "type": "number"
          },
          "size": { "description": "The size of each page", "type": "number" },
          "sortBy": {
            "description": "Key value pair of sorting instruction ({field1:ASC,field2:DESC,...})",
            "type": "object"
          },
          "count": {
            "description": "The current number of records in result",
            "type": "number"
          },
          "totalPages": {
            "description": "The total number of pages (computed via the current size)",
            "type": "number"
          },
          "totalElements": {
            "description": "The total number of records in database",
            "type": "number"
          },
          "data": {
            "description": "The records",
            "type": "array",
            "items": { "type": "object" }
          }
        }
      },
      "SortQuery": {
        "description": "Sorting instruction\nNote that when used with query param sorts, it must be in the form ['field1,ASC', 'field2,DESC'...]\nThe URL looks like: https://my-api/endpoint?sorts=field1,ASC&sorts=field2,DESC (note that sorts= is used multiple times to act as an array)",
        "required": ["field"],
        "type": "object",
        "properties": {
          "field": { "description": "Any existing field", "type": "string" },
          "direction": {
            "description": "The sorting direction (ascending by default)",
            "type": "string",
            "enum": ["ASC", "DESC"]
          }
        }
      },
      "FilterOperator": {
        "description": "Operator for applying filtering operations\nBe careful of using correct format compatible with the value type \"1\" is a string while 1 is a number",
        "type": "object",
        "properties": {
          "is": {
            "description": "Check if field is provided value (name[is]\"A\")",
            "type": "string"
          },
          "eq": {
            "description": "Check if field equals provided value (name[eq]\"A\")",
            "type": "string"
          },
          "lt": {
            "description": "Check if field is lesser than provided value name[lt]\"B\"",
            "type": "string"
          },
          "ltEq": {
            "description": "Check if field is lesser than or equal to provided value (name[ltEq]\"B\")",
            "type": "string"
          },
          "gt": {
            "description": "Check if field is greater than provided value (name[gt]\"A\")",
            "type": "string"
          },
          "gtEq": {
            "description": "Check if field is greater than or equal to provided value (name[gtEq]\"A\")",
            "type": "string"
          },
          "like": {
            "description": "Check if field is like provided value (name[like]\"%A%\")",
            "type": "string"
          },
          "iLike": {
            "description": "Check if field is like provided value (case insensitive) (name[iLike]\"Al%\")",
            "type": "string"
          },
          "bt": {
            "description": "Check if field is between the two provided values (name[bt][\"A\",\"B\"])",
            "type": "string"
          },
          "in": {
            "description": "Check if field is in list of provided values (name[in][\"A\",\"C\"])",
            "type": "string"
          },
          "any": {
            "description": "Check if field is in any of provided values (name[any][\"A\",\"D\"])",
            "type": "string"
          },
          "null": {
            "description": "Check if field is null (name[null])",
            "type": "string"
          }
        }
      },
      "FilterQuery": {
        "description": "Filtering instructions\nNote that when used with query param filters, it must be in the form  in the form ['field1[operator1]value1', 'field2[operator2]value2'...]\nAlso note that filters is interpreted as a two-dimensional array, as so, it can be used in URL with 0 based number indices\nThe URL looks like: https://my-api/endpoint?filters[0]=field01[operator01]value01&filters[0]=field02[operator02]value02&filters[1]=field11[operator11]value11\nAll filtering instructions in a same level are concatenated with an AND operator, while the operator between different is interpreted as an OR.\nThe previous URL is interpreted as: \"Find records with (field01[operator01]value01 AND field02[operator02]value02) OR (field11[operator11]value11)",
        "required": ["field", "operator", "value"],
        "type": "object",
        "properties": {
          "field": { "description": "Any existing field", "type": "string" },
          "operator": {
            "description": "Any existing operator between brackets",
            "$ref": "#/components/schemas/FilterOperator"
          },
          "value": {
            "description": "The value to apply with given operator on provided field",
            "type": "string"
          }
        }
      },
      "BadRequestError": {
        "description": "Received request from user is not valid",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number",
            "enum": ["400"]
          }
        }
      },
      "BaseCustomError": {
        "description": "Base custom error",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number"
          },
          "fieldErrors": {
            "description": "The error translated message",
            "type": "string"
          }
        }
      },
      "DatabaseConnectionError": {
        "description": "Connection to database failed for some reason",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number",
            "enum": ["500"]
          }
        }
      },
      "DtoValidationError": {
        "description": "Given input did not match DTO specs",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number",
            "enum": ["400"]
          }
        }
      },
      "ForbiddenError": {
        "description": "Anonymous user not authorized for this operation",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number",
            "enum": ["403"]
          }
        }
      },
      "GenericError": {
        "description": "Generic error when no specific one available",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number"
          }
        }
      },
      "NotAuthorizedError": {
        "description": "Current user not authorized for this operation",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number",
            "enum": ["401"]
          }
        }
      },
      "NotFoundError": {
        "description": "Current resource did not exist",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number",
            "enum": ["404"]
          }
        }
      },
      "RequestValidationError": {
        "description": "Given parameters did not match expectations",
        "required": ["message", "localeMessage", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "localeMessage": {
            "description": "The error translated message",
            "type": "string"
          },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number",
            "enum": ["400"]
          }
        }
      },
      "TokenValidationError": {
        "description": "Given token did not match expectations",
        "required": ["message", "statusCode"],
        "type": "object",
        "properties": {
          "message": { "description": "The error message", "type": "string" },
          "statusCode": {
            "description": "The HTTP status code",
            "type": "number",
            "enum": ["400"]
          }
        }
      },
      "ApiError": {
        "description": "Representation of error sent by API",
        "required": ["requestId", "errors"],
        "type": "object",
        "properties": {
          "requestId": {
            "description": "UID associated to received request",
            "type": "string"
          },
          "errors": {
            "description": "The list of errors generated when running request",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CustomError" }
          }
        }
      },
      "CustomError": {
        "description": "Custom error object",
        "required": ["message", "localeMessage"],
        "type": "object",
        "properties": {
          "message": { "description": "The error's message", "type": "string" },
          "localeMessage": {
            "description": "The error's message",
            "type": "string"
          },
          "field": {
            "description": "Field responsible for this error (when provided)",
            "type": "string"
          },
          "value": {
            "description": "Value of the field (when provided)",
            "type": "string"
          }
        }
      },
      "UserCredentials": {
        "description": "Current user credentials",
        "required": ["id", "username", "role"],
        "type": "object",
        "properties": {
          "id": { "description": "User's ID", "type": "string" },
          "username": { "description": "User's unique name", "type": "string" },
          "role": {
            "description": "User's associated privileges",
            "type": "string"
          }
        }
      }
    }
  }
}
