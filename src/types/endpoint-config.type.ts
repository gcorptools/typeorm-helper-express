import { Page } from '@gcorptools/typeorm-helper';
import { Request, NextFunction } from 'express';
import { FindOptionsWhere } from 'typeorm';

export type BuilderMethod = {
  // Get
  readOne: 'readOne';
  readById: 'readById';
  readPage: 'readPage';
  readAll: 'readAll';

  // Post
  create: 'create';

  // Update
  update: 'update';
  patch: 'patch';

  // Delete
  deleteAll: 'deleteAll';
  deleteById: 'deleteById';
  deleteByIds: 'deleteByIds';
};

type BeforeResult = {
  /**
   * Wether calling endpoint should pursue operations or return
   * If true, method should abort!
   */
  nextCalled: boolean;
  /**
   * Transformed data from provided one
   */
  resultData: any;
  /**
   * In case we did some database searches in before method, we will use the exact results in afterQuery
   */
  savedData?: any;
};

export type EndpointMethod = {
  /**
   * Get method
   */
  get: 'get';
  /**
   * Post method
   */
  post: 'post';
  /**
   * Put method
   */
  put: 'put';
  /**
   * Patch method
   */
  patch: 'patch';
  /**
   * Delete method
   */
  delete: 'delete';
};

type InternalEndpointConfig = {
  /**
   * Express.Router method executed
   */
  routerMethod: keyof EndpointMethod;
  /**
   * Builder method executed
   */
  builderMethod: keyof BuilderMethod;
};

export type ExternalEndpointConfig<T> = {
  /**
   * Path assigned to endpoint
   */
  path: string;
  /**
   * If disabled, no route will be generated by this endpoint
   */
  disabled: boolean;
  /**
   * Middleware methods
   */
  middleWares: any[];
  /**
   * Method executed before database research
   */
  beforeQuery: (
    req: Request,
    next: NextFunction,
    data?: any,
    records?: T | T[]
  ) => Promise<BeforeResult>;
  /**
   * Method executed after database research
   */
  afterQuery: (
    records?: any | any[] | Page<T>,
    savedData?: any
  ) => Promise<any | any[] | undefined>;
  /**
   * Used in request in order to decide if it must consider soft deleted records or not.
   */
  withDeleted: (req: Request) => Promise<boolean>;
  /**
   * For delete operation, decide if it must be soft deleted or hard
   */
  softDelete: (req: Request, resultData?: any) => Promise<boolean>;
};

/**
 * Configuration for route endpoints
 */
export type EndpointConfig<T> = InternalEndpointConfig &
  ExternalEndpointConfig<T>;

/**
 * Configuration for route endpoints (allow empty properties)
 */
export type PartialEndpointConfig<T> = {
  [P in keyof ExternalEndpointConfig<T>]?: ExternalEndpointConfig<T>[P];
};

type BaseBuilderConfig<T> = {
  /**
   * Used ID field
   */
  idField: string;
  /**
   * Globally applied middle wares
   */
  globalMiddleWares: any[];
  /**
   * Default select to apply on database fetching
   */
  defaultSelect: Record<string, any>; //TODO: Add field selection in queries
  /**
   * Default relations to apply on database fetching
   */
  defaultRelations: string[];
  /**
   * Default filters that will be applied upon every repository searches
   */
  globalWhere: (req: Request) => Promise<FindOptionsWhere<T>>;
  /**
   * Used in request in order to decide if it must consider soft deleted records or not.
   */
  defaultWithDeleted: (req: Request) => Promise<boolean>;
  /**
   * For delete operation, decide if it must be soft deleted or hard
   */
  defaultSoftDelete: (req: Request, resultData?: any) => Promise<boolean>;
};

/**
 * Configuration for route builder
 */
export type BuilderConfig<T> = BaseBuilderConfig<T> & {
  // eslint-disable-next-line no-unused-vars
  [P in keyof BuilderMethod]: EndpointConfig<T>;
};

export type PartialBuilderConfig<T> = {
  [P in keyof BaseBuilderConfig<T>]?: BaseBuilderConfig<T>[P];
} & {
  // eslint-disable-next-line no-unused-vars
  [P in keyof BuilderMethod]?: PartialEndpointConfig<T>;
};
