import { TRANSLATION_KEYS } from '../constants';
import { CustomError, TranslateMethod } from '../types';
import { ValidationError } from 'express-validator';
import { BaseCustomError } from './base-custom-error';

/**
 * Given parameters did not match expectations
 * @typedef {object} RequestValidationError
 * @property {string} message.required - The error message
 * @property {string} localeMessage.required - The error translated message
 * @property {number} statusCode.required - The HTTP status code - enum:400
 */
export class RequestValidationError extends BaseCustomError {
  statusCode = 400;

  /**
   * Create an instance of RequestValidationError
   * @param {ValidationError[]} _errors the list of errors generated by class-validator
   * @param {string} message the message to display to user
   * @param {string} localeMessage the translated message
   */
  constructor(
    private _errors: ValidationError[],
    message: string = 'Invalid request received',
    localeMessage: string = TRANSLATION_KEYS.error.requestValidation
  ) {
    super(message, localeMessage);
    Object.setPrototypeOf(this, RequestValidationError.prototype);
  }

  /**
   * All validation error issues with their corresponding fields
   * @param {TranslateMethod} translator method translating keys into sentences
   * @return {CustomError[]} an array of current errors
   */
  override serializeErrors(translator: TranslateMethod): CustomError[] {
    return [
      {
        message: this.message,
        localeMessage: translator(this.localeMessage)
      }
    ].concat(
      this._errors.map((error: ValidationError) => {
        return {
          message: error.msg,
          field: error.param,
          localeMessage: this._toLocaleMessage(
            error.param,
            'validation.',
            [error.msg],
            translator
          )
        };
      })
    );
  }
}
